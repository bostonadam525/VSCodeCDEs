{"version":3,"file":"extension.js","mappings":"uwBAEA,mBAOA,oBAAyBA,GAIxBC,QAAQC,IAAI,0DAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,mBAAmB,KAGnEF,EAAOG,OAAOC,uBAAuB,yBAAyB,IAE/DJ,EAAOK,UAAUC,yBAAwBC,IACxC,MAAMC,EAASR,EAAOG,OAAOM,iBAC7B,IAAIF,EAAEG,eAAeC,MAAKC,GAAGA,EAAEC,KAAKC,SAAS,UAG7CjB,QAAQC,IAAIS,GACPC,GACDD,EAAEQ,SAASC,SAASC,SAAS,cAG9BT,GAAQU,UAAUC,SAAWX,EAAOU,UAAUE,cAAa,CAC7D,MAAMC,EAAWb,EAAOU,UAAUI,OAClCzB,QAAQC,IAAI,kBAAmBuB,GAC/BxB,QAAQC,IAAIS,EAAEQ,SAASQ,QAAQ,IAAIvB,EAAOwB,MAAMhB,EAAOU,UAAUO,MAAOjB,EAAOU,UAAUQ,OAEzF,MAAMC,EAAWpB,EAAEQ,SAASa,OAAOP,EAASQ,MACtCC,EAAeH,EAASd,KAAKkB,MAAM,KAOzC,GAAID,EAAaE,QAAU,EAAE,CAC5B,MAAMC,EAAMH,EAAa,GACzBjC,QAAQC,IAAI,aAAcmC,GAEtBA,EAAID,OAAO,GACdE,EAASD,EAAIE,OAEf,MAECtC,QAAQC,IAAI,OAAQuB,EAASQ,KAAM,4BAA6BF,EAGlE,KAED,IAAIS,EAAwC,KAE5C,MAAMF,EAAYG,IACjB,GAAID,EAAa,CAChB,MAAME,EAAIC,mBAAmBF,GAC7BD,EAAaI,QAAQC,KAAO,2ZAgBmEH,kGAKhG,GAMKI,EAAiB,KACtBN,EAAepC,EAAOG,OAAOwC,mBAC5B,aACA,gCACA3C,EAAO4C,WAAWC,OAClB,CACCC,eAAe,EACfC,yBAAyB,IAIzBb,EAAS,GAAG,EAIf,IAAIc,EAAsBhD,EAAOC,SAASC,gBAAgB,cAAewC,GAEzE9C,EAAQqD,cAAcC,KAAKnD,GAC3BH,EAAQqD,cAAcC,KAAKF,GAC3BN,GACD,EAGA,wBAA8B,C,WCnH9BS,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,M","sources":["../.././src/web/extension.ts","../../external commonjs \"vscode\"","../../webpack/bootstrap","../../webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n\n\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"cdes\" is now running!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('cdes.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from cdes!');\n\t});\n\tvscode.workspace.onDidChangeTextDocument(e => {\n\t\tconst editor = vscode.window.activeTextEditor;\n\t\tif (e.contentChanges.some(c=>c.text.includes('\\n'))){\n\t\t\treturn; // do not react when newlines are added, we listen for text additions\n\t\t}\n\t\tconsole.log(e);\n\t\tif (!editor){ return};\n\t\tif(!e.document.fileName.endsWith('.cde.json')){\n\t\t\treturn;\n\t\t}\n\t\tif(editor?.selection.isEmpty && editor.selection.isSingleLine){\n\t\t\tconst position = editor.selection.active;\n\t\t\tconsole.log('cursor position', position);\n\t\t\tconsole.log(e.document.getText(new vscode.Range(editor.selection.start, editor.selection.end)));\n\n\t\t\tconst lineText = e.document.lineAt(position.line);\n\t\t\tconst splitOnQuote = lineText.text.split('\"');\n\n\t\t\t//we look for patterns when val is a string so it is the 4 th elem of split line on '\"':\n\t\t\t//{\n\t\t\t//\t\"key\": \"val\"\n\t\t\t//}\n\t\t\t//\n\t\t\tif (splitOnQuote.length >= 4){\n\t\t\t\tconst val = splitOnQuote[3];\n\t\t\t\tconsole.log('extracted:', val);\n\n\t\t\t\tif (val.length>0){\n\t\t\t\t\tsetQuery(val.trim());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"line\", position.line, \"is not proper for parsing\", lineText);\n\t\t\t}\n\n\t\t}\n\t});\n\tlet webViewPanel:vscode.WebviewPanel|null = null;\n\n\tconst setQuery = (search:string) => {\n\t\tif (webViewPanel){\n\t\t\tconst q = encodeURIComponent(search);\n\t\t\twebViewPanel.webview.html = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\n\t\t\t<style>\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tbackground-color: white;\n\t\t\t}\n\t\t\t</style>\n\t\t\t<meta charset=\"utf-8\" />\n\t\t\t<title>upmedic AnatomicLocation search</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<iframe style=\"width: 100vw; height: 100vh;\" src=\"https://www.upmedic.io/anatomiclocations?q=${q}\" title=\"AnatomicLocations search by upmedic\"></iframe>\n\n\t\t\t</body>\n\t\t\t</html>\n\t\t\t`;\n\t\t}\n\t\t\n\t};\n\n\n\n\tconst startExtension = ()=> {\n\t\twebViewPanel = vscode.window.createWebviewPanel(\n\t\t\t'cdessearch', // Identifies the type of the webview. Used internally\n\t\t\t'AnatomicStructures.org search', // Title of the panel displayed to the user\n\t\t\tvscode.ViewColumn.Beside, // Editor column to show the new webview panel in.\n\t\t\t{\n\t\t\t\tenableScripts: true,\n\t\t\t\tretainContextWhenHidden: true,\n\t\t\t}\n\t\t\n\t\t  );\n\t\t  setQuery('');\n\t};\n\n\n\tlet startWebViewCommand = vscode.commands.registerCommand('cdes.search', startExtension);\n\n\tcontext.subscriptions.push(disposable);\n\tcontext.subscriptions.push(startWebViewCommand);\n\tstartExtension();\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\n\n\nfunction trim (s:string, c:string) {\n\tif (c === \"]\") {c = \"\\\\]\";}\n\tif (c === \"^\") {c = \"\\\\^\";}\n\tif (c === \"\\\\\") {c = \"\\\\\\\\\";}\n\treturn s.replace(new RegExp(\n\t  \"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"\n\t), \"\");\n  }\n  \n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(8387);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","workspace","onDidChangeTextDocument","e","editor","activeTextEditor","contentChanges","some","c","text","includes","document","fileName","endsWith","selection","isEmpty","isSingleLine","position","active","getText","Range","start","end","lineText","lineAt","line","splitOnQuote","split","length","val","setQuery","trim","webViewPanel","search","q","encodeURIComponent","webview","html","startExtension","createWebviewPanel","ViewColumn","Beside","enableScripts","retainContextWhenHidden","startWebViewCommand","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}